; This implements "lock coins", simulating bitcoin transactions.
;
; Choose a list of one or more inputs, I_0, ... I_n. The first is the "primary" input.
;
; The inputs all commit to this list using an ephemeral "lock" coin, which includes
; a commitment to the inputs. The "lock" coins are L_0, ... L_n, and all have the same
; puzzle:
;
;  (curry_args lock-mod lock-mod list-of-input-coins)
;
; When spent, L_0 will yield ((ASSERT_MY_ID xxx) (ASSERT_CONSUMED L_0) (ASSERT_CONSUMED L_1) ... (ASSERT_CONSUMED L_n))
; Each L_1, ..., L_n will yield exactly ((ASSERT_MY_ID xxx) (ASSERT_CONSUMED L_0)) when spent.
; This ensures that you can't spend one without spending them all.
;
; Each of I_0, ..., I_n must yield ((CREATE_COIN L_puzzle_for_coin_list 0) (ASSERT_CONSUMED L_0))
; This ensures it both creates its lock coin, and consumes L_0 (and thus, all other inputs).
;
; This locking mechanism can be used for ANY transaction. Its first use will be coloured coins.


(mod
  (mod-code list-of-input-coins input-index)

  (include "chia-constants.clvm")
  (include "curry.clvm")
  (include "sha256tree.clvm")

  (defun item-at-index (items index)
    ;; array indexing
    ;; pick out and return items[index]
    (if index
      (item-at-index (r items) (- index 1))
      (f items)
    )
  )

  (defun lock-id-for-input (lock-puzzle-hash input-coin)
    ;; generate the coin ID for a lock with the given puzzle hash coming from the given inpu
    (sha256 (coin-id-for-coin input-coin)
            lock-puzzle-hash
            0)
  )

  (defun create-assert-consumed-list (lock-puzzle-hash input-coins)
    ;; generate the list of (ASSERT_COIN_CONSUMED xxx) conditions
    (if input-coins
      (c (list ASSERT_COIN_CONSUMED (lock-id-for-input lock-puzzle-hash (f input-coins)))
         (create-assert-consumed-list lock-puzzle-hash (r input-coins)))
      (q ())
    )
  )

  (defun-inline create-assert-me (input-id lock-puzzle-hash)
    ;; generate (ASSERT_MY_ID xxx) condition
    (list ASSERT_MY_COIN_ID (sha256 input-id lock-puzzle-hash 0))
  )

  (defun coin-id-for-coin ((parent-id puzzle-hash amount))
    ;; calculate the coin ID for a coin
    (sha256 parent-id puzzle-hash amount)
  )

  (defun-inline lock-puzzle-hash-for-inputs (mod-code-hash list-of-input-coins)
    ;; generate the puzzle hash for a list of input coins
    (sha256tree_esc (curry mod-code-hash mod-code-hash list-of-input-coins) mod-code-hash)
  )

  (defun main (mod-code list-of-input-coins lock-puzzle-hash input-index)
    ;; generate conditions
    (c (create-assert-me (coin-id-for-coin (item-at-index list-of-input-coins input-index)) lock-puzzle-hash)
      (create-assert-consumed-list lock-puzzle-hash
                                   (if input-index
                                     (c (f list-of-input-coins) (q ()))
                                     list-of-input-coins
                                   )
      )
    )
  )

  (main mod-code list-of-input-coins (lock-puzzle-hash-for-inputs (sha256tree mod-code) list-of-input-coins) input-index)
)
